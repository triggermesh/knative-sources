/*
Copyright (c) 2020 TriggerMesh, Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/knative-sources/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OciMetricsSourceLister helps list OciMetricsSources.
type OciMetricsSourceLister interface {
	// List lists all OciMetricsSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.OciMetricsSource, err error)
	// OciMetricsSources returns an object that can list and get OciMetricsSources.
	OciMetricsSources(namespace string) OciMetricsSourceNamespaceLister
	OciMetricsSourceListerExpansion
}

// ociMetricsSourceLister implements the OciMetricsSourceLister interface.
type ociMetricsSourceLister struct {
	indexer cache.Indexer
}

// NewOciMetricsSourceLister returns a new OciMetricsSourceLister.
func NewOciMetricsSourceLister(indexer cache.Indexer) OciMetricsSourceLister {
	return &ociMetricsSourceLister{indexer: indexer}
}

// List lists all OciMetricsSources in the indexer.
func (s *ociMetricsSourceLister) List(selector labels.Selector) (ret []*v1alpha1.OciMetricsSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OciMetricsSource))
	})
	return ret, err
}

// OciMetricsSources returns an object that can list and get OciMetricsSources.
func (s *ociMetricsSourceLister) OciMetricsSources(namespace string) OciMetricsSourceNamespaceLister {
	return ociMetricsSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OciMetricsSourceNamespaceLister helps list and get OciMetricsSources.
type OciMetricsSourceNamespaceLister interface {
	// List lists all OciMetricsSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.OciMetricsSource, err error)
	// Get retrieves the OciMetricsSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.OciMetricsSource, error)
	OciMetricsSourceNamespaceListerExpansion
}

// ociMetricsSourceNamespaceLister implements the OciMetricsSourceNamespaceLister
// interface.
type ociMetricsSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OciMetricsSources in the indexer for a given namespace.
func (s ociMetricsSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OciMetricsSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OciMetricsSource))
	})
	return ret, err
}

// Get retrieves the OciMetricsSource from the indexer for a given namespace and name.
func (s ociMetricsSourceNamespaceLister) Get(name string) (*v1alpha1.OciMetricsSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ocimetricssource"), name)
	}
	return obj.(*v1alpha1.OciMetricsSource), nil
}
